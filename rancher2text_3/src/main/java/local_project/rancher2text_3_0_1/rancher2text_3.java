// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.rancher2text_3_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: rancher2text_3 Purpose: rancher2text<br>
 * Description: rancher2text <br>
 * @author user@talend.com
 * @version 6.1.0.20151029_1337
 * @status 
 */
public class rancher2text_3 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (outFileName != null) {

				this.setProperty("outFileName", outFileName.toString());

			}

			if (inFileName != null) {

				this.setProperty("inFileName", inFileName.toString());

			}

		}

		public String outFileName;

		public String getOutFileName() {
			return this.outFileName;
		}

		public String inFileName;

		public String getInFileName() {
			return this.inFileName;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "rancher2text_3";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					rancher2text_3.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(rancher2text_3.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRESTAuth_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRESTAuth_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tExtractJSONFields_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.outFileName);
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.outFileName);

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class mappedStruct implements
			routines.system.IPersistableRow<mappedStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String environment;

		public String getEnvironment() {
			return this.environment;
		}

		public String environmentUri;

		public String getEnvironmentUri() {
			return this.environmentUri;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String hostUri;

		public String getHostUri() {
			return this.hostUri;
		}

		public String created;

		public String getCreated() {
			return this.created;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String dockerVersion;

		public String getDockerVersion() {
			return this.dockerVersion;
		}

		public String operatingSystem;

		public String getOperatingSystem() {
			return this.operatingSystem;
		}

		public String kernelVersion;

		public String getKernelVersion() {
			return this.kernelVersion;
		}

		public Integer cpuCount;

		public Integer getCpuCount() {
			return this.cpuCount;
		}

		public Float memTotal;

		public Float getMemTotal() {
			return this.memTotal;
		}

		public String dockerStorageDriver;

		public String getDockerStorageDriver() {
			return this.dockerStorageDriver;
		}

		public String poolName;

		public String getPoolName() {
			return this.poolName;
		}

		public String backingFilesystem;

		public String getBackingFilesystem() {
			return this.backingFilesystem;
		}

		public String libraryVersion;

		public String getLibraryVersion() {
			return this.libraryVersion;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.environment = readString(dis);

					this.environmentUri = readString(dis);

					this.host = readString(dis);

					this.hostUri = readString(dis);

					this.created = readString(dis);

					this.state = readString(dis);

					this.dockerVersion = readString(dis);

					this.operatingSystem = readString(dis);

					this.kernelVersion = readString(dis);

					this.cpuCount = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.memTotal = null;
					} else {
						this.memTotal = dis.readFloat();
					}

					this.dockerStorageDriver = readString(dis);

					this.poolName = readString(dis);

					this.backingFilesystem = readString(dis);

					this.libraryVersion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.environment, dos);

				// String

				writeString(this.environmentUri, dos);

				// String

				writeString(this.host, dos);

				// String

				writeString(this.hostUri, dos);

				// String

				writeString(this.created, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.dockerVersion, dos);

				// String

				writeString(this.operatingSystem, dos);

				// String

				writeString(this.kernelVersion, dos);

				// Integer

				writeInteger(this.cpuCount, dos);

				// Float

				if (this.memTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.memTotal);
				}

				// String

				writeString(this.dockerStorageDriver, dos);

				// String

				writeString(this.poolName, dos);

				// String

				writeString(this.backingFilesystem, dos);

				// String

				writeString(this.libraryVersion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("environment=" + environment);
			sb.append(",environmentUri=" + environmentUri);
			sb.append(",host=" + host);
			sb.append(",hostUri=" + hostUri);
			sb.append(",created=" + created);
			sb.append(",state=" + state);
			sb.append(",dockerVersion=" + dockerVersion);
			sb.append(",operatingSystem=" + operatingSystem);
			sb.append(",kernelVersion=" + kernelVersion);
			sb.append(",cpuCount=" + String.valueOf(cpuCount));
			sb.append(",memTotal=" + String.valueOf(memTotal));
			sb.append(",dockerStorageDriver=" + dockerStorageDriver);
			sb.append(",poolName=" + poolName);
			sb.append(",backingFilesystem=" + backingFilesystem);
			sb.append(",libraryVersion=" + libraryVersion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mappedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String self;

		public String getSelf() {
			return this.self;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String dockerVersion;

		public String getDockerVersion() {
			return this.dockerVersion;
		}

		public String operatingSystem;

		public String getOperatingSystem() {
			return this.operatingSystem;
		}

		public String kernelVersion;

		public String getKernelVersion() {
			return this.kernelVersion;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Float memTotal;

		public Float getMemTotal() {
			return this.memTotal;
		}

		public String created;

		public String getCreated() {
			return this.created;
		}

		public String dockerStorageDriver;

		public String getDockerStorageDriver() {
			return this.dockerStorageDriver;
		}

		public String poolName;

		public String getPoolName() {
			return this.poolName;
		}

		public String backingFilesystem;

		public String getBackingFilesystem() {
			return this.backingFilesystem;
		}

		public String libraryVersion;

		public String getLibraryVersion() {
			return this.libraryVersion;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.self = readString(dis);

					this.state = readString(dis);

					this.dockerVersion = readString(dis);

					this.operatingSystem = readString(dis);

					this.kernelVersion = readString(dis);

					this.count = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.memTotal = null;
					} else {
						this.memTotal = dis.readFloat();
					}

					this.created = readString(dis);

					this.dockerStorageDriver = readString(dis);

					this.poolName = readString(dis);

					this.backingFilesystem = readString(dis);

					this.libraryVersion = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.self, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.dockerVersion, dos);

				// String

				writeString(this.operatingSystem, dos);

				// String

				writeString(this.kernelVersion, dos);

				// Integer

				writeInteger(this.count, dos);

				// Float

				if (this.memTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.memTotal);
				}

				// String

				writeString(this.created, dos);

				// String

				writeString(this.dockerStorageDriver, dos);

				// String

				writeString(this.poolName, dos);

				// String

				writeString(this.backingFilesystem, dos);

				// String

				writeString(this.libraryVersion, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",self=" + self);
			sb.append(",state=" + state);
			sb.append(",dockerVersion=" + dockerVersion);
			sb.append(",operatingSystem=" + operatingSystem);
			sb.append(",kernelVersion=" + kernelVersion);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",memTotal=" + String.valueOf(memTotal));
			sb.append(",created=" + created);
			sb.append(",dockerStorageDriver=" + dockerStorageDriver);
			sb.append(",poolName=" + poolName);
			sb.append(",backingFilesystem=" + backingFilesystem);
			sb.append(",libraryVersion=" + libraryVersion);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String self;

		public String getSelf() {
			return this.self;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String hosts;

		public String getHosts() {
			return this.hosts;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.self = readString(dis);

					this.description = readString(dis);

					this.hosts = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.self, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.hosts, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",self=" + self);
			sb.append(",description=" + description);
			sb.append(",hosts=" + hosts);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public String userName;

		public String getUserName() {
			return this.userName;
		}

		public String passWord;

		public String getPassWord() {
			return this.passWord;
		}

		public String environment;

		public String getEnvironment() {
			return this.environment;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.userName = readString(dis);

					this.passWord = readString(dis);

					this.environment = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.userName, dos);

				// String

				writeString(this.passWord, dos);

				// String

				writeString(this.environment, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("userName=" + userName);
			sb.append(",passWord=" + passWord);
			sb.append(",environment=" + environment);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row2Struct row2 = new row2Struct();
				row6Struct row6 = new row6Struct();
				row4Struct row4 = new row4Struct();
				mappedStruct mapped = new mappedStruct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tRESTAuth_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.inFileName;
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.inFileName, "UTF-8", "\t", "\n", false,
								1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.userName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.passWord = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.environment = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							globalMap.put("userName", row1.userName);
							nb_line_tFlowToIterate_1++;
							globalMap.put("passWord", row1.passWord);
							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
									counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */
							NB_ITERATE_tRESTAuth_2++;

							/**
							 * [tFlowToIterate_2 begin ] start
							 */

							int NB_ITERATE_tRESTAuth_3 = 0; // for statistics

							ok_Hash.put("tFlowToIterate_2", false);
							start_Hash.put("tFlowToIterate_2",
									System.currentTimeMillis());

							currentComponent = "tFlowToIterate_2";

							int tos_count_tFlowToIterate_2 = 0;

							int nb_line_tFlowToIterate_2 = 0;
							int counter_tFlowToIterate_2 = 0;

							/**
							 * [tFlowToIterate_2 begin ] stop
							 */

							/**
							 * [tExtractJSONFields_1 begin ] start
							 */

							ok_Hash.put("tExtractJSONFields_1", false);
							start_Hash.put("tExtractJSONFields_1",
									System.currentTimeMillis());

							currentComponent = "tExtractJSONFields_1";

							int tos_count_tExtractJSONFields_1 = 0;

							int nb_line_tExtractJSONFields_1 = 0;
							String jsonStr_tExtractJSONFields_1 = "";

							class JsonPathCache_tExtractJSONFields_1 {
								final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

								public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
										String jsonPath) {
									if (jsonPathString2compiledJsonPath
											.containsKey(jsonPath)) {
										return jsonPathString2compiledJsonPath
												.get(jsonPath);
									} else {
										com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
												.compile(jsonPath);
										jsonPathString2compiledJsonPath.put(
												jsonPath, compiledLoopPath);
										return compiledLoopPath;
									}
								}
							}

							JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

							/**
							 * [tExtractJSONFields_1 begin ] stop
							 */

							/**
							 * [tRESTAuth_2 begin ] start
							 */

							ok_Hash.put("tRESTAuth_2", false);
							start_Hash.put("tRESTAuth_2",
									System.currentTimeMillis());

							currentComponent = "tRESTAuth_2";

							int tos_count_tRESTAuth_2 = 0;

							String endpoint_tRESTAuth_2 = "https://rancher.eionet.europa.eu/v1/projects";

							String trustStoreFile_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.trustStore");
							String trustStoreType_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.trustStoreType");
							String trustStorePWD_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.trustStorePassword");

							String keyStoreFile_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.keyStore");
							String keyStoreType_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.keyStoreType");
							String keyStorePWD_tRESTAuth_2 = System
									.getProperty("javax.net.ssl.keyStorePassword");

							com.sun.jersey.api.client.config.ClientConfig config_tRESTAuth_2 = new com.sun.jersey.api.client.config.DefaultClientConfig();
							javax.net.ssl.SSLContext ctx_tRESTAuth_2 = javax.net.ssl.SSLContext
									.getInstance("SSL");

							javax.net.ssl.TrustManager[] tms_tRESTAuth_2 = null;
							if (trustStoreFile_tRESTAuth_2 != null
									&& trustStoreType_tRESTAuth_2 != null) {
								char[] password_tRESTAuth_2 = null;
								if (trustStorePWD_tRESTAuth_2 != null)
									password_tRESTAuth_2 = trustStorePWD_tRESTAuth_2
											.toCharArray();
								java.security.KeyStore trustStore_tRESTAuth_2 = java.security.KeyStore
										.getInstance(trustStoreType_tRESTAuth_2);
								trustStore_tRESTAuth_2.load(
										new java.io.FileInputStream(
												trustStoreFile_tRESTAuth_2),
										password_tRESTAuth_2);

								javax.net.ssl.TrustManagerFactory tmf_tRESTAuth_2 = javax.net.ssl.TrustManagerFactory
										.getInstance(javax.net.ssl.KeyManagerFactory
												.getDefaultAlgorithm());
								tmf_tRESTAuth_2.init(trustStore_tRESTAuth_2);
								tms_tRESTAuth_2 = tmf_tRESTAuth_2
										.getTrustManagers();
							}

							javax.net.ssl.KeyManager[] kms_tRESTAuth_2 = null;
							if (keyStoreFile_tRESTAuth_2 != null
									&& keyStoreType_tRESTAuth_2 != null) {
								char[] password_tRESTAuth_2 = null;
								if (keyStorePWD_tRESTAuth_2 != null)
									password_tRESTAuth_2 = keyStorePWD_tRESTAuth_2
											.toCharArray();
								java.security.KeyStore keyStore_tRESTAuth_2 = java.security.KeyStore
										.getInstance(keyStoreType_tRESTAuth_2);
								keyStore_tRESTAuth_2.load(
										new java.io.FileInputStream(
												keyStoreFile_tRESTAuth_2),
										password_tRESTAuth_2);

								javax.net.ssl.KeyManagerFactory kmf_tRESTAuth_2 = javax.net.ssl.KeyManagerFactory
										.getInstance(javax.net.ssl.KeyManagerFactory
												.getDefaultAlgorithm());
								kmf_tRESTAuth_2.init(keyStore_tRESTAuth_2,
										password_tRESTAuth_2);
								kms_tRESTAuth_2 = kmf_tRESTAuth_2
										.getKeyManagers();
							}

							ctx_tRESTAuth_2.init(kms_tRESTAuth_2,
									tms_tRESTAuth_2, null);
							config_tRESTAuth_2
									.getProperties()
									.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
											new com.sun.jersey.client.urlconnection.HTTPSProperties(
													new javax.net.ssl.HostnameVerifier() {

														public boolean verify(
																String hostName,
																javax.net.ssl.SSLSession session) {
															return true;
														}
													}, ctx_tRESTAuth_2));

							com.sun.jersey.api.client.Client restClient_tRESTAuth_2 = com.sun.jersey.api.client.Client
									.create(config_tRESTAuth_2);

							restClient_tRESTAuth_2
									.addFilter(new com.sun.jersey.api.client.filter.HTTPBasicAuthFilter(
											((String) globalMap.get("userName")),
											((String) globalMap.get("passWord"))));

							com.sun.jersey.api.client.WebResource restResource_tRESTAuth_2;
							if (endpoint_tRESTAuth_2 != null
									&& !("").equals(endpoint_tRESTAuth_2)) {
								restResource_tRESTAuth_2 = restClient_tRESTAuth_2
										.resource(endpoint_tRESTAuth_2);
							} else {
								throw new IllegalArgumentException(
										"url can't be empty!");
							}

							com.sun.jersey.api.client.ClientResponse errorResponse_tRESTAuth_2 = null;
							String restResponse_tRESTAuth_2 = "";
							try {
								restResponse_tRESTAuth_2 = restResource_tRESTAuth_2

								.get(String.class);
							} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
								errorResponse_tRESTAuth_2 = ue.getResponse();
							}
							// for output
							row3 = new row3Struct();
							if (errorResponse_tRESTAuth_2 != null) {
								row3.ERROR_CODE = errorResponse_tRESTAuth_2
										.getStatus();
							} else {
								row3.Body = restResponse_tRESTAuth_2;
							}

							/**
							 * [tRESTAuth_2 begin ] stop
							 */

							/**
							 * [tRESTAuth_2 main ] start
							 */

							currentComponent = "tRESTAuth_2";

							tos_count_tRESTAuth_2++;

							/**
							 * [tRESTAuth_2 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							if (row3.Body != null) {// C_01
								jsonStr_tExtractJSONFields_1 = row3.Body
										.toString();

								row5 = null;

								String loopPath_tExtractJSONFields_1 = "$.data[*]";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								try {
									com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
											.read(compiledLoopPath_tExtractJSONFields_1,
													net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1
												.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									System.err.println(ex_tExtractJSONFields_1
											.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										row5 = null;
										row5 = new row5Struct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = "name";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												row5.name = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row5.name =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "links.self";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												row5.self = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row5.self =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "description";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												row5.description = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row5.description =

												null

												;
											}
											jsonPath_tExtractJSONFields_1 = "links.hosts";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {
												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);
												row5.hosts = value_tExtractJSONFields_1 == null ?

												null

														: value_tExtractJSONFields_1
																.toString();
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												row5.hosts =

												null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											System.err
													.println(ex_tExtractJSONFields_1
															.getMessage());
											row5 = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

									// }

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */
									// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tFlowToIterate_2 main ] start
										 */

										currentComponent = "tFlowToIterate_2";

										globalMap.put("hosts", row5.hosts);
										nb_line_tFlowToIterate_2++;
										globalMap.put("self", row5.self);
										nb_line_tFlowToIterate_2++;
										globalMap.put("name", row5.name);
										nb_line_tFlowToIterate_2++;
										counter_tFlowToIterate_2++;
										globalMap
												.put("tFlowToIterate_2_CURRENT_ITERATION",
														counter_tFlowToIterate_2);

										tos_count_tFlowToIterate_2++;

										/**
										 * [tFlowToIterate_2 main ] stop
										 */
										NB_ITERATE_tRESTAuth_3++;

										/**
										 * [tFileOutputDelimited_1 begin ] start
										 */

										ok_Hash.put("tFileOutputDelimited_1",
												false);
										start_Hash.put(
												"tFileOutputDelimited_1",
												System.currentTimeMillis());

										currentComponent = "tFileOutputDelimited_1";

										int tos_count_tFileOutputDelimited_1 = 0;

										String fileName_tFileOutputDelimited_1 = "";
										fileName_tFileOutputDelimited_1 = (new java.io.File(
												context.outFileName))
												.getAbsolutePath().replace(
														"\\", "/");
										String fullName_tFileOutputDelimited_1 = null;
										String extension_tFileOutputDelimited_1 = null;
										String directory_tFileOutputDelimited_1 = null;
										if ((fileName_tFileOutputDelimited_1
												.indexOf("/") != -1)) {
											if (fileName_tFileOutputDelimited_1
													.lastIndexOf(".") < fileName_tFileOutputDelimited_1
													.lastIndexOf("/")) {
												fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
												extension_tFileOutputDelimited_1 = "";
											} else {
												fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
														.substring(
																0,
																fileName_tFileOutputDelimited_1
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
														.substring(fileName_tFileOutputDelimited_1
																.lastIndexOf("."));
											}
											directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
													.substring(
															0,
															fileName_tFileOutputDelimited_1
																	.lastIndexOf("/"));
										} else {
											if (fileName_tFileOutputDelimited_1
													.lastIndexOf(".") != -1) {
												fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
														.substring(
																0,
																fileName_tFileOutputDelimited_1
																		.lastIndexOf("."));
												extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
														.substring(fileName_tFileOutputDelimited_1
																.lastIndexOf("."));
											} else {
												fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
												extension_tFileOutputDelimited_1 = "";
											}
											directory_tFileOutputDelimited_1 = "";
										}
										boolean isFileGenerated_tFileOutputDelimited_1 = true;
										java.io.File filetFileOutputDelimited_1 = new java.io.File(
												fileName_tFileOutputDelimited_1);
										globalMap
												.put("tFileOutputDelimited_1_FILE_NAME",
														fileName_tFileOutputDelimited_1);
										if (filetFileOutputDelimited_1.exists()) {
											isFileGenerated_tFileOutputDelimited_1 = false;
										}
										int nb_line_tFileOutputDelimited_1 = 0;
										int splitEvery_tFileOutputDelimited_1 = 1;
										int splitedFileNo_tFileOutputDelimited_1 = 0;
										int currentRow_tFileOutputDelimited_1 = 0;

										final String OUT_DELIM_tFileOutputDelimited_1 = /**
										 * 
										 * Start field tFileOutputDelimited_1:
										 * FIELDSEPARATOR
										 */
										"\t"/**
										 * End field tFileOutputDelimited_1:
										 * FIELDSEPARATOR
										 */
										;

										final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
										 * 
										 * Start field
										 * tFileOutputDelimited_1:ROWSEPARATOR
										 */
										"\n"/**
										 * End field
										 * tFileOutputDelimited_1:ROWSEPARATOR
										 */
										;

										// create directory only if not exists
										if (directory_tFileOutputDelimited_1 != null
												&& directory_tFileOutputDelimited_1
														.trim().length() != 0) {
											java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
													directory_tFileOutputDelimited_1);
											if (!dir_tFileOutputDelimited_1
													.exists()) {
												dir_tFileOutputDelimited_1
														.mkdirs();
											}
										}

										// routines.system.Row
										java.io.Writer outtFileOutputDelimited_1 = null;

										outtFileOutputDelimited_1 = new java.io.BufferedWriter(
												new java.io.OutputStreamWriter(
														new java.io.FileOutputStream(
																fileName_tFileOutputDelimited_1,
																true), "UTF-8"));
										if (filetFileOutputDelimited_1.length() == 0) {
											outtFileOutputDelimited_1
													.write("environment");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("environmentUri");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("host");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("hostUri");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("created");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("state");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("dockerVersion");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("operatingSystem");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("kernelVersion");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("cpuCount");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("memTotal");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("dockerStorageDriver");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("poolName");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("backingFilesystem");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_tFileOutputDelimited_1);
											outtFileOutputDelimited_1
													.write("libraryVersion");
											outtFileOutputDelimited_1
													.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
											outtFileOutputDelimited_1.flush();
										}

										resourceMap.put(
												"out_tFileOutputDelimited_1",
												outtFileOutputDelimited_1);
										resourceMap
												.put("nb_line_tFileOutputDelimited_1",
														nb_line_tFileOutputDelimited_1);
										resourceMap
												.put("isFileGenerated_tFileOutputDelimited_1",
														isFileGenerated_tFileOutputDelimited_1);
										resourceMap.put(
												"filetFileOutputDelimited_1",
												filetFileOutputDelimited_1);

										/**
										 * [tFileOutputDelimited_1 begin ] stop
										 */

										/**
										 * [tMap_1 begin ] start
										 */

										ok_Hash.put("tMap_1", false);
										start_Hash.put("tMap_1",
												System.currentTimeMillis());

										currentComponent = "tMap_1";

										int tos_count_tMap_1 = 0;

										// ###############################
										// # Lookup's keys initialization
										// ###############################

										// ###############################
										// # Vars initialization
										class Var__tMap_1__Struct {
										}
										Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
										// ###############################

										// ###############################
										// # Outputs initialization
										mappedStruct mapped_tmp = new mappedStruct();
										// ###############################

										/**
										 * [tMap_1 begin ] stop
										 */

										/**
										 * [tExtractJSONFields_3 begin ] start
										 */

										ok_Hash.put("tExtractJSONFields_3",
												false);
										start_Hash.put("tExtractJSONFields_3",
												System.currentTimeMillis());

										currentComponent = "tExtractJSONFields_3";

										int tos_count_tExtractJSONFields_3 = 0;

										int nb_line_tExtractJSONFields_3 = 0;
										String jsonStr_tExtractJSONFields_3 = "";

										class JsonPathCache_tExtractJSONFields_3 {
											final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

											public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
													String jsonPath) {
												if (jsonPathString2compiledJsonPath
														.containsKey(jsonPath)) {
													return jsonPathString2compiledJsonPath
															.get(jsonPath);
												} else {
													com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
															.compile(jsonPath);
													jsonPathString2compiledJsonPath
															.put(jsonPath,
																	compiledLoopPath);
													return compiledLoopPath;
												}
											}
										}

										JsonPathCache_tExtractJSONFields_3 jsonPathCache_tExtractJSONFields_3 = new JsonPathCache_tExtractJSONFields_3();

										/**
										 * [tExtractJSONFields_3 begin ] stop
										 */

										/**
										 * [tReplace_1 begin ] start
										 */

										ok_Hash.put("tReplace_1", false);
										start_Hash.put("tReplace_1",
												System.currentTimeMillis());

										currentComponent = "tReplace_1";

										int tos_count_tReplace_1 = 0;

										int nb_line_tReplace_1 = 0;

										/**
										 * [tReplace_1 begin ] stop
										 */

										/**
										 * [tRESTAuth_3 begin ] start
										 */

										ok_Hash.put("tRESTAuth_3", false);
										start_Hash.put("tRESTAuth_3",
												System.currentTimeMillis());

										currentComponent = "tRESTAuth_3";

										int tos_count_tRESTAuth_3 = 0;

										String endpoint_tRESTAuth_3 = ((String) globalMap
												.get("hosts"));

										String trustStoreFile_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.trustStore");
										String trustStoreType_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.trustStoreType");
										String trustStorePWD_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.trustStorePassword");

										String keyStoreFile_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.keyStore");
										String keyStoreType_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.keyStoreType");
										String keyStorePWD_tRESTAuth_3 = System
												.getProperty("javax.net.ssl.keyStorePassword");

										com.sun.jersey.api.client.config.ClientConfig config_tRESTAuth_3 = new com.sun.jersey.api.client.config.DefaultClientConfig();
										javax.net.ssl.SSLContext ctx_tRESTAuth_3 = javax.net.ssl.SSLContext
												.getInstance("SSL");

										javax.net.ssl.TrustManager[] tms_tRESTAuth_3 = null;
										if (trustStoreFile_tRESTAuth_3 != null
												&& trustStoreType_tRESTAuth_3 != null) {
											char[] password_tRESTAuth_3 = null;
											if (trustStorePWD_tRESTAuth_3 != null)
												password_tRESTAuth_3 = trustStorePWD_tRESTAuth_3
														.toCharArray();
											java.security.KeyStore trustStore_tRESTAuth_3 = java.security.KeyStore
													.getInstance(trustStoreType_tRESTAuth_3);
											trustStore_tRESTAuth_3
													.load(new java.io.FileInputStream(
															trustStoreFile_tRESTAuth_3),
															password_tRESTAuth_3);

											javax.net.ssl.TrustManagerFactory tmf_tRESTAuth_3 = javax.net.ssl.TrustManagerFactory
													.getInstance(javax.net.ssl.KeyManagerFactory
															.getDefaultAlgorithm());
											tmf_tRESTAuth_3
													.init(trustStore_tRESTAuth_3);
											tms_tRESTAuth_3 = tmf_tRESTAuth_3
													.getTrustManagers();
										}

										javax.net.ssl.KeyManager[] kms_tRESTAuth_3 = null;
										if (keyStoreFile_tRESTAuth_3 != null
												&& keyStoreType_tRESTAuth_3 != null) {
											char[] password_tRESTAuth_3 = null;
											if (keyStorePWD_tRESTAuth_3 != null)
												password_tRESTAuth_3 = keyStorePWD_tRESTAuth_3
														.toCharArray();
											java.security.KeyStore keyStore_tRESTAuth_3 = java.security.KeyStore
													.getInstance(keyStoreType_tRESTAuth_3);
											keyStore_tRESTAuth_3
													.load(new java.io.FileInputStream(
															keyStoreFile_tRESTAuth_3),
															password_tRESTAuth_3);

											javax.net.ssl.KeyManagerFactory kmf_tRESTAuth_3 = javax.net.ssl.KeyManagerFactory
													.getInstance(javax.net.ssl.KeyManagerFactory
															.getDefaultAlgorithm());
											kmf_tRESTAuth_3.init(
													keyStore_tRESTAuth_3,
													password_tRESTAuth_3);
											kms_tRESTAuth_3 = kmf_tRESTAuth_3
													.getKeyManagers();
										}

										ctx_tRESTAuth_3.init(kms_tRESTAuth_3,
												tms_tRESTAuth_3, null);
										config_tRESTAuth_3
												.getProperties()
												.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
														new com.sun.jersey.client.urlconnection.HTTPSProperties(
																new javax.net.ssl.HostnameVerifier() {

																	public boolean verify(
																			String hostName,
																			javax.net.ssl.SSLSession session) {
																		return true;
																	}
																},
																ctx_tRESTAuth_3));

										com.sun.jersey.api.client.Client restClient_tRESTAuth_3 = com.sun.jersey.api.client.Client
												.create(config_tRESTAuth_3);

										restClient_tRESTAuth_3
												.addFilter(new com.sun.jersey.api.client.filter.HTTPBasicAuthFilter(
														((String) globalMap
																.get("userName")),
														((String) globalMap
																.get("passWord"))));

										com.sun.jersey.api.client.WebResource restResource_tRESTAuth_3;
										if (endpoint_tRESTAuth_3 != null
												&& !("").equals(endpoint_tRESTAuth_3)) {
											restResource_tRESTAuth_3 = restClient_tRESTAuth_3
													.resource(endpoint_tRESTAuth_3);
										} else {
											throw new IllegalArgumentException(
													"url can't be empty!");
										}

										com.sun.jersey.api.client.ClientResponse errorResponse_tRESTAuth_3 = null;
										String restResponse_tRESTAuth_3 = "";
										try {
											restResponse_tRESTAuth_3 = restResource_tRESTAuth_3

											.get(String.class);
										} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
											errorResponse_tRESTAuth_3 = ue
													.getResponse();
										}
										// for output
										row2 = new row2Struct();
										if (errorResponse_tRESTAuth_3 != null) {
											row2.ERROR_CODE = errorResponse_tRESTAuth_3
													.getStatus();
										} else {
											row2.Body = restResponse_tRESTAuth_3;
										}

										/**
										 * [tRESTAuth_3 begin ] stop
										 */

										/**
										 * [tRESTAuth_3 main ] start
										 */

										currentComponent = "tRESTAuth_3";

										tos_count_tRESTAuth_3++;

										/**
										 * [tRESTAuth_3 main ] stop
										 */

										/**
										 * [tReplace_1 main ] start
										 */

										currentComponent = "tReplace_1";

										String searchStr_tReplace_1_1 = "Library Version"
												+ "";
										row2.Body = StringUtils
												.replaceAllStrictly(row2.Body,
														searchStr_tReplace_1_1,
														"libraryVersion" + "",
														false, false);
										String searchStr_tReplace_1_2 = "Pool Name"
												+ "";
										row2.Body = StringUtils
												.replaceAllStrictly(row2.Body,
														searchStr_tReplace_1_2,
														"poolName" + "", false,
														false);
										String searchStr_tReplace_1_3 = "Backing Filesystem"
												+ "";
										row2.Body = StringUtils
												.replaceAllStrictly(row2.Body,
														searchStr_tReplace_1_3,
														"backingFilesystem"
																+ "", false,
														false);
										row6.Body = row2.Body;

										row6.ERROR_CODE = row2.ERROR_CODE;

										nb_line_tReplace_1++;

										tos_count_tReplace_1++;

										/**
										 * [tReplace_1 main ] stop
										 */

										/**
										 * [tExtractJSONFields_3 main ] start
										 */

										currentComponent = "tExtractJSONFields_3";

										if (row6.Body != null) {// C_01
											jsonStr_tExtractJSONFields_3 = row6.Body
													.toString();

											row4 = null;

											String loopPath_tExtractJSONFields_3 = "$.data[*]";
											java.util.List<Object> resultset_tExtractJSONFields_3 = new java.util.ArrayList<Object>();

											boolean isStructError_tExtractJSONFields_3 = true;
											try {
												com.jayway.jsonpath.ReadContext document_tExtractJSONFields_3 = com.jayway.jsonpath.JsonPath
														.parse(jsonStr_tExtractJSONFields_3);
												com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
														.getCompiledJsonPath(loopPath_tExtractJSONFields_3);
												Object result_tExtractJSONFields_3 = document_tExtractJSONFields_3
														.read(compiledLoopPath_tExtractJSONFields_3,
																net.minidev.json.JSONObject.class);
												if (result_tExtractJSONFields_3 instanceof net.minidev.json.JSONArray) {
													resultset_tExtractJSONFields_3 = (net.minidev.json.JSONArray) result_tExtractJSONFields_3;
												} else {
													resultset_tExtractJSONFields_3
															.add(result_tExtractJSONFields_3);
												}

												isStructError_tExtractJSONFields_3 = false;
											} catch (java.lang.Exception ex_tExtractJSONFields_3) {
												System.err
														.println(ex_tExtractJSONFields_3
																.getMessage());
											}

											String jsonPath_tExtractJSONFields_3 = null;
											com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_3 = null;

											Object value_tExtractJSONFields_3 = null;

											for (int i_tExtractJSONFields_3 = 0; isStructError_tExtractJSONFields_3
													|| (i_tExtractJSONFields_3 < resultset_tExtractJSONFields_3
															.size()); i_tExtractJSONFields_3++) {
												if (!isStructError_tExtractJSONFields_3) {
													Object row_tExtractJSONFields_3 = resultset_tExtractJSONFields_3
															.get(i_tExtractJSONFields_3);
													row4 = null;
													row4 = new row4Struct();
													nb_line_tExtractJSONFields_3++;
													try {
														jsonPath_tExtractJSONFields_3 = "name";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.name = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.name =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "links.self";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.self = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.self =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "state";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.state = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.state =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.osInfo.dockerVersion";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.dockerVersion = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.dockerVersion =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.osInfo.operatingSystem";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.operatingSystem = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.operatingSystem =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.osInfo.kernelVersion";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.kernelVersion = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.kernelVersion =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.cpuInfo.count";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															if (value_tExtractJSONFields_3 != null
																	&& !value_tExtractJSONFields_3
																			.toString()
																			.isEmpty()) {
																row4.count = ParserUtils
																		.parseTo_Integer(value_tExtractJSONFields_3
																				.toString());
															} else {
																row4.count =

																null

																;
															}
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.count =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.memoryInfo.memTotal";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															if (value_tExtractJSONFields_3 != null
																	&& !value_tExtractJSONFields_3
																			.toString()
																			.isEmpty()) {
																row4.memTotal = ParserUtils
																		.parseTo_Float(value_tExtractJSONFields_3
																				.toString());
															} else {
																row4.memTotal =

																null

																;
															}
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.memTotal =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "created";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.created = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.created =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.diskInfo.dockerStorageDriver";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.dockerStorageDriver = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.dockerStorageDriver =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.diskInfo.dockerStorageDriverStatus.poolName";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.poolName = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.poolName =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.diskInfo.dockerStorageDriverStatus.backingFilesystem";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.backingFilesystem = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.backingFilesystem =

															null

															;
														}
														jsonPath_tExtractJSONFields_3 = "info.diskInfo.dockerStorageDriverStatus.libraryVersion";
														compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
																.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

														try {
															value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
																	.read(row_tExtractJSONFields_3);
															row4.libraryVersion = value_tExtractJSONFields_3 == null ?

															null

																	: value_tExtractJSONFields_3
																			.toString();
														} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
															row4.libraryVersion =

															null

															;
														}
													} catch (java.lang.Exception ex_tExtractJSONFields_3) {
														System.err
																.println(ex_tExtractJSONFields_3
																		.getMessage());
														row4 = null;
													}

												}

												isStructError_tExtractJSONFields_3 = false;

												// }

												tos_count_tExtractJSONFields_3++;

												/**
												 * [tExtractJSONFields_3 main ]
												 * stop
												 */
												// Start of branch "row4"
												if (row4 != null) {

													/**
													 * [tMap_1 main ] start
													 */

													currentComponent = "tMap_1";

													boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_1 = false;
													boolean mainRowRejected_tMap_1 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
														// ###############################
														// # Output tables

														mapped = null;

														// # Output table :
														// 'mapped'
														mapped_tmp.environment = ((String) globalMap
																.get("name"));
														;
														mapped_tmp.environmentUri = ((String) globalMap
																.get("self"));
														;
														mapped_tmp.host = row4.name;
														mapped_tmp.hostUri = row4.self;
														mapped_tmp.created = row4.created;
														mapped_tmp.state = row4.state;
														mapped_tmp.dockerVersion = row4.dockerVersion;
														mapped_tmp.operatingSystem = row4.operatingSystem;
														mapped_tmp.kernelVersion = row4.kernelVersion;
														mapped_tmp.cpuCount = row4.count;
														mapped_tmp.memTotal = row4.memTotal;
														mapped_tmp.dockerStorageDriver = row4.dockerStorageDriver;
														mapped_tmp.poolName = row4.poolName;
														mapped_tmp.backingFilesystem = row4.backingFilesystem;
														mapped_tmp.libraryVersion = row4.libraryVersion;
														mapped = mapped_tmp;
														// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_1 = false;

													tos_count_tMap_1++;

													/**
													 * [tMap_1 main ] stop
													 */
													// Start of branch "mapped"
													if (mapped != null) {

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] start
														 */

														currentComponent = "tFileOutputDelimited_1";

														StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
														if (mapped.environment != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.environment);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.environmentUri != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.environmentUri);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.host != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.host);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.hostUri != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.hostUri);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.created != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.created);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.state != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.state);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.dockerVersion != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.dockerVersion);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.operatingSystem != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.operatingSystem);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.kernelVersion != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.kernelVersion);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.cpuCount != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.cpuCount);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.memTotal != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.memTotal);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.dockerStorageDriver != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.dockerStorageDriver);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.poolName != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.poolName);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.backingFilesystem != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.backingFilesystem);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_tFileOutputDelimited_1);
														if (mapped.libraryVersion != null) {
															sb_tFileOutputDelimited_1
																	.append(mapped.libraryVersion);
														}
														sb_tFileOutputDelimited_1
																.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

														nb_line_tFileOutputDelimited_1++;
														resourceMap
																.put("nb_line_tFileOutputDelimited_1",
																		nb_line_tFileOutputDelimited_1);

														outtFileOutputDelimited_1
																.write(sb_tFileOutputDelimited_1
																		.toString());

														tos_count_tFileOutputDelimited_1++;

														/**
														 * [
														 * tFileOutputDelimited_1
														 * main ] stop
														 */

													} // End of branch "mapped"

												} // End of branch "row4"

												// end for
											}

										} // C_01

										/**
										 * [tRESTAuth_3 end ] start
										 */

										currentComponent = "tRESTAuth_3";

										ok_Hash.put("tRESTAuth_3", true);
										end_Hash.put("tRESTAuth_3",
												System.currentTimeMillis());

										/**
										 * [tRESTAuth_3 end ] stop
										 */

										/**
										 * [tReplace_1 end ] start
										 */

										currentComponent = "tReplace_1";

										globalMap.put("tReplace_1_NB_LINE",
												nb_line_tReplace_1);

										ok_Hash.put("tReplace_1", true);
										end_Hash.put("tReplace_1",
												System.currentTimeMillis());

										/**
										 * [tReplace_1 end ] stop
										 */

										/**
										 * [tExtractJSONFields_3 end ] start
										 */

										currentComponent = "tExtractJSONFields_3";

										globalMap.put(
												"tExtractJSONFields_1_NB_LINE",
												nb_line_tExtractJSONFields_3);

										ok_Hash.put("tExtractJSONFields_3",
												true);
										end_Hash.put("tExtractJSONFields_3",
												System.currentTimeMillis());

										/**
										 * [tExtractJSONFields_3 end ] stop
										 */

										/**
										 * [tMap_1 end ] start
										 */

										currentComponent = "tMap_1";

										// ###############################
										// # Lookup hashes releasing
										// ###############################

										ok_Hash.put("tMap_1", true);
										end_Hash.put("tMap_1",
												System.currentTimeMillis());

										/**
										 * [tMap_1 end ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 end ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										if (outtFileOutputDelimited_1 != null) {
											outtFileOutputDelimited_1.flush();
											outtFileOutputDelimited_1.close();
										}

										globalMap
												.put("tFileOutputDelimited_1_NB_LINE",
														nb_line_tFileOutputDelimited_1);
										globalMap
												.put("tFileOutputDelimited_1_FILE_NAME",
														fileName_tFileOutputDelimited_1);

										if (isFileGenerated_tFileOutputDelimited_1
												&& nb_line_tFileOutputDelimited_1 == 0) {

											filetFileOutputDelimited_1.delete();

										}

										resourceMap
												.put("finish_tFileOutputDelimited_1",
														true);

										ok_Hash.put("tFileOutputDelimited_1",
												true);
										end_Hash.put("tFileOutputDelimited_1",
												System.currentTimeMillis());

										/**
										 * [tFileOutputDelimited_1 end ] stop
										 */

									} // End of branch "row5"

									// end for
								}

							} // C_01

							/**
							 * [tRESTAuth_2 end ] start
							 */

							currentComponent = "tRESTAuth_2";

							ok_Hash.put("tRESTAuth_2", true);
							end_Hash.put("tRESTAuth_2",
									System.currentTimeMillis());

							/**
							 * [tRESTAuth_2 end ] stop
							 */

							/**
							 * [tExtractJSONFields_1 end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							globalMap.put("tExtractJSONFields_1_NB_LINE",
									nb_line_tExtractJSONFields_1);

							ok_Hash.put("tExtractJSONFields_1", true);
							end_Hash.put("tExtractJSONFields_1",
									System.currentTimeMillis());

							/**
							 * [tExtractJSONFields_1 end ] stop
							 */

							/**
							 * [tFlowToIterate_2 end ] start
							 */

							currentComponent = "tFlowToIterate_2";

							globalMap.put("tFlowToIterate_2_NB_LINE",
									nb_line_tFlowToIterate_2);

							ok_Hash.put("tFlowToIterate_2", true);
							end_Hash.put("tFlowToIterate_2",
									System.currentTimeMillis());

							/**
							 * [tFlowToIterate_2 end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.inFileName) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tRESTAuth_2 finally ] start
				 */

				currentComponent = "tRESTAuth_2";

				/**
				 * [tRESTAuth_2 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tRESTAuth_3 finally ] start
				 */

				currentComponent = "tRESTAuth_3";

				/**
				 * [tRESTAuth_3 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_3 finally ] start
				 */

				currentComponent = "tExtractJSONFields_3";

				/**
				 * [tExtractJSONFields_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_rancher2text_3 = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_rancher2text_3.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_rancher2text_3.length == 0) {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_rancher2text_3 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_rancher2text_3, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_rancher2text_3) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[12];

					public void addRow(String[] row) {

						for (int i = 0; i < 12; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 11 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 11 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[11]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "moment", "pid",
						"root_pid", "father_pid", "project", "job", "context",
						"priority", "type", "origin", "message", "code", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row7.type = lcm.getType();
					row7.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row7.priority = lcm.getPriority();
					row7.message = lcm.getMessage();
					row7.code = lcm.getCode();

					row7.moment = java.util.Calendar.getInstance().getTime();

					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;

					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					String[] row_tLogRow_1 = new String[12];

					if (row7.moment != null) { //
						row_tLogRow_1[0] = FormatterUtils.format_Date(
								row7.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row7.pid != null) { //
						row_tLogRow_1[1] = String.valueOf(row7.pid);

					} //

					if (row7.root_pid != null) { //
						row_tLogRow_1[2] = String.valueOf(row7.root_pid);

					} //

					if (row7.father_pid != null) { //
						row_tLogRow_1[3] = String.valueOf(row7.father_pid);

					} //

					if (row7.project != null) { //
						row_tLogRow_1[4] = String.valueOf(row7.project);

					} //

					if (row7.job != null) { //
						row_tLogRow_1[5] = String.valueOf(row7.job);

					} //

					if (row7.context != null) { //
						row_tLogRow_1[6] = String.valueOf(row7.context);

					} //

					if (row7.priority != null) { //
						row_tLogRow_1[7] = String.valueOf(row7.priority);

					} //

					if (row7.type != null) { //
						row_tLogRow_1[8] = String.valueOf(row7.type);

					} //

					if (row7.origin != null) { //
						row_tLogRow_1[9] = String.valueOf(row7.origin);

					} //

					if (row7.message != null) { //
						row_tLogRow_1[10] = String.valueOf(row7.message);

					} //

					if (row7.code != null) { //
						row_tLogRow_1[11] = String.valueOf(row7.code);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "dev";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final rancher2text_3 rancher2text_3Class = new rancher2text_3();

		int exitCode = rancher2text_3Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = rancher2text_3.class
					.getClassLoader().getResourceAsStream(
							"local_project/rancher2text_3_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.outFileName = (String) context.getProperty("outFileName");
			context.inFileName = (String) context.getProperty("inFileName");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("outFileName")) {
				context.outFileName = (String) parentContextMap
						.get("outFileName");
			}
			if (parentContextMap.containsKey("inFileName")) {
				context.inFileName = (String) parentContextMap
						.get("inFileName");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileDelete_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileDelete_1) {
			globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

			e_tFileDelete_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : rancher2text_3");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 135406 characters generated by Talend Open Studio for Data Integration on the
 * December 10, 2015 10:22:04 AM CET
 ************************************************************************************************/
